generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  EDUCATOR
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName         String
  lastName          String
  email             String   @unique
  password          String
  mobile            String
  role              UserRole @default(STUDENT)
  gender            Gender
  profilePictureUrl String?

  student       Student?
  educator      Educator?
  wallet        Wallet?
  answers       ClassAnswer[]
  notifications Notification[]
  comments      PostComment[]
  posts         Post[]         @relation("createdPosts")
  likedPosts    Post[]         @relation("likedPosts")
}

model Connection {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user1 String
  user2 String

  notifications Notification[]
}

enum NotificationType {
  LIVE
  CONNECTION
}

model Notification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type NotificationType

  connection   Connection? @relation(fields: [connectionId], references: [id])
  connectionId String?

  liveStream   LiveStream? @relation(fields: [liveStreamId], references: [id])
  liveStreamId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Wallet {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  points Int @default(0)

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  purchases Purchase[]
}

enum PurchaseType {
  POINTS
  CLASS
}

model Purchase {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactionId Int @default(autoincrement())

  type PurchaseType

  points Int?

  class   Class?  @relation(fields: [classId], references: [id])
  classId String?

  wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId String
}

enum Level {
  SCHOOL
  UNIVERSITY
  OTHER
}

model Grade {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  students Student[]
  schools  School[]
}

model School {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  grades   Grade[]
  students Student[]
  subjects Subject[]
}

model University {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  majors    String[]
  educators Educator[]

  subject Subject[]
}

model Student {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  level Level

  // School
  school   School? @relation(fields: [schoolId], references: [id])
  schoolId String?

  grade   Grade?  @relation(fields: [gradeId], references: [id])
  gradeId String?

  // University
  batch String?

  // Shared
  major String?

  user    User    @relation(fields: [userId], references: [id])
  userId  String  @unique
  classes Class[]
}

model Educator {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cprUrl      String?
  cvUrl       String?
  description String?
  experience  String?
  active      Boolean @default(false)

  university   University? @relation(fields: [universityId], references: [id])
  universityId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  subjects Subject[]
  classes  Class[]
}

enum SubjectLevel {
  SCHOOl
  UNIVERSITY
}

model Organization {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  imageUrl String

  subjects Subject[]
}

model Subject {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  thumbnailUrl String?
  name         String
  level        SubjectLevel
  tags         String[]
  major        String?

  // University
  year Int?

  createdBy   Organization @relation(fields: [createdById], references: [id])
  createdById String

  educators    Educator[]
  schools      School[]
  universities University[]
  classes      Class[]
}

model ClassQuestion {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question String
  chapter  String?

  verifiedAnswer ClassAnswer? @relation("verifiedAnswer")

  class   Class  @relation(fields: [classId], references: [id])
  classId String

  answers ClassAnswer[] @relation("unverifiedAnswers")
}

model ClassAnswer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answer String

  question   ClassQuestion @relation("unverifiedAnswers", fields: [questionId], references: [id])
  questionId String

  verified   ClassQuestion @relation("verifiedAnswer", fields: [verifiedId], references: [id])
  verifiedId String        @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model ClassResource {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  url   String?

  class   Class  @relation(fields: [classId], references: [id])
  classId String
}

model LiveStream {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url       String
  startTime DateTime

  classChapter  ClassChapterContent[]
  notifications Notification[]
}

enum ClassChapterContentType {
  VIDEO
  PDF
  LIVE
  QUIZ
}

model ClassChapterContent {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type ClassChapterContentType
  url  String?

  // Live
  liveStreams  LiveStream? @relation(fields: [liveStreamId], references: [id])
  liveStreamId String?

  // TODO: Add quiz relation

  chapter   ClassChapter? @relation(fields: [chapterId], references: [id])
  chapterId String?
}

model ClassChapter {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String

  class   Class  @relation(fields: [classId], references: [id])
  classId String

  content ClassChapterContent[]
}

model Class {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  thumbnailUrl String?
  description  String?
  timings      String[]
  startTime    DateTime
  endTime      DateTime
  price        Int
  points       Int

  subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId String?

  educator   Educator? @relation(fields: [educatorId], references: [id])
  educatorId String?

  resources ClassResource[]
  students  Student[]
  questions ClassQuestion[]
  Purchase  Purchase[]
  chapters  ClassChapter[]
  posts     Post[]
}

model Ad {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  imageUrl String
}

model PostComment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum PostTo {
  PROFILE
  CLASS
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  postTo PostTo[]

  class   Class?  @relation(fields: [classId], references: [id])
  classId String?

  user   User   @relation("createdPosts", fields: [userId], references: [id])
  userId String

  likes    User[]        @relation("likedPosts")
  comments PostComment[]
}

model ContactUs {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  mobile  String
  email   String
  message String
}

enum TokenOperation {
  RESET_PASSWORD
}

model Token {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token      String         @unique
  opertation TokenOperation
  helper     String?
  expired    Boolean        @default(false)
}
